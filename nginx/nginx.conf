worker_processes auto;

events {
    worker_connections 1024;
}

http {
    server_tokens off;
    charset utf-8;

    # Security: Rate Limiting
    limit_req_zone $binary_remote_addr zone=login_zone:10m rate=2r/m;
    limit_conn_zone $binary_remote_addr zone=addr:10m;

    # Security: Bot Detection
    map $http_user_agent $bad_bot {
        default 0;
        "~*(?:python|wget|curl|scrapy|libwww|httpclient|nikto|scan|nmap|sqlmap|masscan|bot|spider|crawl)" 1;
    }

    # HTTP Headers
    add_header X-Content-Type-Options nosniff;
    add_header X-Frame-Options SAMEORIGIN;
    add_header X-XSS-Protection "1; mode=block";
    add_header Referrer-Policy "no-referrer-when-downgrade";
    add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;

    # SSL/TLS Hardening
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_ciphers 'TLS_AES_256_GCM_SHA384:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256';

    # Logging
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/security_error.log warn;

    # HTTP to HTTPS redirect
    server {
        listen 80 default_server;
        server_name _;
        return 301 https://$host$request_uri;
    }

    
    
 
    # HTTPS server
    server {
        listen 443 ssl http2;
        server_name your-domain.name www.your-domain.name;

        ssl_certificate     /etc/letsencrypt/live/your-domain.name/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/your-domain.name/privkey.pem;

        if ($http_user_agent = "") {
            return 403;
        }

        if ($bad_bot) {
            return 444;
        }

        limit_conn addr 5;

        location ~* /(xmlrpc\.php|wp-login\.php|\.git|\.env|\.htaccess|\.DS_Store) {
            deny all;
        }


        location /oauth2/ {
            proxy_pass       http://oauth2-proxy:4180;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Scheme $scheme;
            proxy_set_header X-Auth-Request-Redirect $request_uri;
        }

        location / {
            auth_request /oauth2/auth;
            error_page 401 = @error401;   

            # Forward the original request to the app (after successful auth)
            proxy_pass http://hub:5000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Scheme $scheme;
            proxy_set_header X-Auth-Request-Access-Token $upstream_http_authorization;
            proxy_set_header Authorization $http_authorization;
        }
        location /jellyfin/ {
            auth_request /oauth2/auth;
            error_page 401 = @error401;   

            # Forward the original request to the app (after successful auth)
            proxy_pass http://jellyfin:8096/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Scheme $scheme;
            proxy_set_header X-Auth-Request-Access-Token $upstream_http_authorization;
            proxy_set_header Authorization $http_authorization;
        }
        location /qbittorrent/ {
            auth_request /oauth2/auth;
            error_page 401 = @error401;   

            # Forward the original request to the app (after successful auth)
            proxy_pass http://qbittorrent:9090/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Scheme $scheme;
            proxy_set_header X-Auth-Request-Access-Token $upstream_http_authorization;
            proxy_set_header Authorization $http_authorization;
        }

        location @error401 {      
            return 302 /oauth2/start?rd=$scheme://$host$request_uri;
        }

        location = /oauth2/auth {
            proxy_pass       http://oauth2-proxy:4180/oauth2/auth;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Scheme $scheme;
            proxy_set_header Content-Length "";
            proxy_pass_request_body off;
        }
        #certbot 
        location ~ /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }
    }
}

